#include <sstream>
#include <numeric>

class Fraction {
    int numerator = 0, denominator = 1;
    void validate();
    
    public:
    Fraction() = default;
    Fraction(int = 0, int = 1);
    Fraction(std::string);
    Fraction(const Fraction&) = default;
    operator int();
    operator double();
    operator float();
    Fraction operator+(Fraction&);
    Fraction gcd(Fraction&);
    void operator+=(Fraction&);
    Fraction operator-(Fraction&);
    void operator-=(Fraction&);
    Fraction operator*(Fraction&);
    void operator*=(Fraction&);
    Fraction operator/(Fraction&);
    void operator/=(Fraction&);
    bool operator==(Fraction&);
    bool operator!=(Fraction&);
    friend std::ostream &operator<<(std::ostream&, Fraction&);
    void simplify();
};
Fraction::Fraction(int num, int den): numerator(num), denominator(den) {
    validate();
    simplify();
}
Fraction::Fraction(std::string num) {
    int decimal = num.find('.'), size = num.size(), res;

    if (decimal != -1) {
        while (decimal != size-1) {
            std::swap(num[decimal], num[decimal+1]);
            denominator *= 10;
            decimal++;
        }
        num.pop_back();
    }
    num = std::stoi(num);
    simplify();
}
void Fraction::validate() {
    if (denominator == 0) throw std::invalid_argument("Division by zero fraction");
}
Fraction::operator int() {
    return numerator / denominator;
}
Fraction::operator double() {
    return static_cast<double>(numerator) / denominator;
}
Fraction::operator float() {
    return static_cast<float>(numerator) / denominator;
}
Fraction Fraction::gcd(Fraction &frac) {
    return Fraction(std::gcd(numerator, frac.numerator), std::lcm(denominator, frac.denominator));
}
Fraction Fraction::operator+(Fraction &frac) {
    return Fraction(numerator * frac.denominator + frac.numerator * denominator, denominator * frac.denominator);
}
void Fraction::operator+=(Fraction &frac) {
    numerator = numerator * frac.denominator + frac.numerator * denominator;
    denominator *= frac.denominator;
    simplify();
}
Fraction Fraction::operator-(Fraction &frac) {
    return Fraction(numerator * frac.denominator - frac.numerator * denominator, denominator * frac.denominator);
}
void Fraction::operator-=(Fraction &frac) {
    numerator = numerator * frac.denominator - frac.numerator * denominator;
    denominator *= frac.denominator;
    simplify();
}
Fraction Fraction::operator*(Fraction &frac) {
    return Fraction(numerator * frac.numerator, denominator * frac.denominator);
}
void Fraction::operator*=(Fraction &frac) {
    numerator *= frac.numerator;
    denominator *= frac.denominator;
    simplify();
}
Fraction Fraction::operator/(Fraction &frac) {
    validate();
    return Fraction(numerator * frac.denominator, denominator * frac.numerator);
}
void Fraction::operator/=(Fraction &frac) {
    validate();
    numerator *= frac.denominator;
    denominator *= frac.numerator;
    simplify();
}
bool Fraction::operator==(Fraction &frac) {
    return numerator == frac.numerator and denominator == frac.denominator;
}
bool Fraction::operator!=(Fraction &frac) {
    return numerator != frac.numerator or denominator != frac.denominator;
}
std::ostream &operator<<(std::ostream &os, Fraction &frac) {
    if (frac.denominator == 1) os << frac.numerator;
    else os << frac.numerator << '/' << frac.denominator;
    return os;
}
void Fraction::simplify() {
    int factor = std::gcd(numerator, denominator);
    numerator /= factor;
    denominator /= factor;
    
    if (denominator < 0) {
        numerator = -numerator;
        denominator = -denominator;
    }
}