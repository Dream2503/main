#include "13-Heap"

template <class type>
class Sort {    // Class to implement various sorting algorithms
    public:
        Sort() = default;
        void bubbleSort(type*, int);    // Function to sort an array using the Bubble Sort algorithm
        void countSort(type*, int); // Function to sort an array using the Counting Sort algorithm
        void descending(type*, int);    // Function to sort an array in descending order
        void insertionSort(type*, int); // Function to sort an array using the Insertion Sort algorithm
        void heapSort(type*, int);  // Function to sort an array using the Heap Sort algorithm
        void mergeSort(type*, int); // Function to sort an array using the Merge Sort algorithm
        void quickSort(type*, int, int);    // Function to sort an array using the Quick Sort algorithm
        void radixSort(type*, int); // Function to sort an array using the Radix Sort algorithm
        void selectionSort(type*, int); // Function to sort an array using the Selection Sort algorithm
        void shellSort(type*, int); // Function to sort an array using the Shell Sort algorithm
};

template <class type>   // Bubble Sort
void Sort<type>::bubbleSort(type *array, int size) {    // Function to sort an array using the Bubble Sort algorithm
    /*
    -> O(n) [best case] [already sorted]
    -> O(n^2) [average case]
    -> O(n^2) [worst case] [always divide in the middle]

    -> in bubble sort we compare the adjacent elements and swap them if they are in the wrong order
    -> in insertion sort we select the element and find out the postion for that element

    -> different names of bubble sort
        -> exchange sort
        -> bubble sort
    */
    bool flag;  // Flag to check if any swaps were made in the current pass

    for (int i = 0; i < size - 1; i++) {    // Outer loop to control the number of passes
        flag = false;   // Reset the flag at the beginning of each pass

        for (int j = 0; j < size - i - 1; j++) {    // Inner loop to compare adjacent elements and swap them if necessary
            if (array[j] > array[j + 1]) {  // Compare adjacent elements and swap them if they are in the wrong order
                std::swap(array[j], array[j + 1]);  // Swap the elements
                flag = true;    // Set the flag to true if a swap was made in this pass
            }   
        }   
        if (!flag) {    // If no swaps were made in the current pass, the array is already sorted
            return; // Return early
        }
    }
}
template <class type>   // Counting Sort
void Sort<type>::countSort(type *array, int size) {   // Function to sort an array using the Counting Sort algorithm
    /*
    -> O(n) [best case] [all elements are same]
    -> O(n) [average case]
    -> O(n) [worst case] [all elements are different]

    -> in counting sort we count the frequency of elements and sort them
    -> in radix sort we divide the number into digits and sort them

    -> different names of counting sort
        -> frequency sort
        -> counting sort
    */
    type max, min;  // Variables to store the maximum and minimum elements in the array
    int i, j, range, *count;    // Variables to store the range of values and the frequency count of each element

    if (size < 1) { // If the array is empty or has only one element, it is already sorted
        return; // Return early
    }
    max = array[0], min = array[0]; // Initialize max and min with the first element of the array

    for (int i = 1; i < size; i++) {    // Find the maximum and minimum elements in the array
        if (array[i] > max) {   // Compare the current element with max
            max = array[i]; // Update max if the current element is larger
        } else if (array[i] < min) {    // Compare the current element with min
            min = array[i]; // Update min if the current element is smaller
        }
    }
    range = max - min + 1;  // Calculate the range of the values (difference between max and min)
    count = new int[range]();    // Create a counting array of size 'range' to hold frequency of elements and initialize all elements to zero

    for (int i = 0; i < size; i++) {    // Count the occurrences of each element in the array
        count[array[i] - min]++;    // Increment the counter for the corresponding value
    }
    for (int i = 0, j = 0; i < range; i++) {    // Reconstruct the sorted array based on the frequency counts
        while (count[i] > 0) {  // For each element that appears in the counting array
            array[j] = i + min; // Place the value at the correct position in the original array
            count[i]--; // Decrement the count for that value
            j++;    // Move to the next position in the array
        }
    }
    delete []count; // Clean up the dynamically allocated memory for the counting array
}
template <class type>   // Descending Order
void Sort<type>::descending(type *array, int size) {    // Function to sort an array in descending order
    for (int i = 0; i < size / 2; i++) {    // Loop through the array up to the middle element
        std::swap(array[i], array[size - i - 1]);   // Swap the current element with the element at the symmetric position from the end
    }
}
template <class type>   // Insertion Sort
void Sort<type>::insertionSort(type *array, int size) {  // Function to sort an array using the Insertion Sort algorithm
    /*
    -> O(n) [best case] [already sorted]
    -> O(n^2) [average case]
    -> O(n^2) [worst case] [always divide in the middle]

    -> in insertion sort we select the element and find out the postion for that element
    -> in selection sort we select the position and find out the element for that position

    -> different names of insertion sort
        -> insertion sort
        -> library sort
    */
    type temp;  // Temporary variable to hold the current element during insertion

    for (int i = 1, j; i < size; i++) { // Loop through each element of the array starting from the second element
        temp = array[i];    // Store the current element to be inserted
        j = i - 1;  // Set 'j' to the index of the element before the current one

        while (j > -1 && array[j] > temp) { // Move elements that are greater than 'temp' one position to the right
            array[j + 1] = array[j];    // Shift the element to the right
            j--;    // Move the index 'j' one step left
        }
        array[j + 1] = temp;    // Insert the stored 'temp' element into its correct position
    }
}
template <class type>   // Heap Sort
void Sort<type>::heapSort(type *array, int size) {  // Function to sort an array using the Heap Sort algorithm
    /*
    -> O(nlogn) [best case] [always divide in the middle]
    -> O(nlogn) [average case]
    -> O(nlogn) [worst case] [always divide in the middle]

    -> in heap sort we create the heap and remove the root element and place it in the sorted array
    -> in selection sort we select the position and find out the element for that position

    -> different names of heap sort
        -> tournament sort
        -> heap sort
    */
    Heap<type> heap(array, size, "min");    // Create a heap from the array, using a "min" heap structure

    for (int i = 0; i < size; i++) {    // Loop to remove the root element from the heap and place it in the sorted array
        array[i] = heap.remove();   // Remove the smallest element from the heap (root of the min-heap) and place it in the correct position in the array
    }
}
template <class type>   // Merge Sort
void Sort<type>::mergeSort(type *array, int size) {   // Function to sort an array using the Merge Sort algorithm
    /*
    -> O(nlogn) [best case] [always divide in the middle]
    -> O(nlogn) [average case]
    -> O(nlogn) [worst case] [always divide in the middle]

    -> in merge sort we divide the array into two halves and sort them and then merge them
    -> in quick sort we select the element and find out the postion for that element

    -> different names of merge sort
        -> divide and conquer sort
        -> merge sort
    */
    auto merge = [](type *array, int low, int mid, int high) -> void {  // Lambda function to merge two sorted halves of the array
        type *list = new type[high - low + 1];    // Create a temporary list to store the merged result
        int i = low, j = mid + 1, k = 0;    // Variables for array traversal and list index

        while (i <= mid && j <= high) { // Compare elements from both halves and merge them in sorted order
            if (array[i] < array[j]) {  // If left element is smaller
                list[k++] = array[i++]; // Place it in 'list'
            } else if (array[j] < array[i]) {   // Compare elements from the two halves  
                list[k++] = array[j++]; // If right element is smaller, place it in 'list'
            } else {    // If both elements are equal
                list[k++] = array[i++]; // Place the left element in 'list'
                list[k++] = array[j++]; // Place the right element in 'list'
            }
        }
        while (i <= mid) {  // If there are remaining elements in the left half
            list[k++] = array[i++]; // Copy them to 'list'
        }
        while (j <= high) { // If there are remaining elements in the right half
            list[k++] = array[j++]; // Copy them to 'list'
        }
        for (i = low, k = 0; i <= high; i++, k++) {   // Copy the merged elements from 'list' back to the original array
            array[i] = list[k]; // Copy the element from 'list' to the array
        }
        delete []list;  // Clean up the temporary list
    };
    int k, low, mid, high;  // Variables for array traversal and subarray indices

    for (k = 2; k <= size; k *= 2) {    // Outer loop to control the size of the subarrays being merged (2, 4, 8, ..., size)
        for (int i = 0; i + k - 1 < size; i += k) { // Inner loop to iterate through subarrays and merge them
            low = i;    // Starting index of the left subarray
            high = i + k - 1;   // Ending index of the right subarray
            mid = (low + high) / 2; // Midpoint of the subarrays
            merge(array, low, mid, high);   // Merge the subarrays
        }
    }
    k /= 2;  // Halve 'k' to return to the original size of subarrays after the final merging loop.

    if (k != size) {    // If 'k'is not equal to the size of the array, it means that there are two remaining subarrays that need to be merged.
        merge(array, k, (k + size - 1) / 2, size - 1);  // Merge the last two subarrays: from index 'k' to the end of the array
        merge(array, 0, k - 1, size - 1);   // Finally, merge the whole array from the beginning (index 0) to the last index (size - 1)
    }
}
template <class type>   // Quick Sort
void Sort<type>::quickSort(type *array, int low, int high) {    // Function to sort an array using the Quick Sort algorithm
    /*
    -> for first element as a pivot
        -> O(nlogn) [best case] [partitioning in the middle]
        -> O(nlogn) [average case]
        -> O(n^2) [worst case] [already sorted / partitioning at any end]
    
    -> for middle element as pivot
        -> O(nlogn) [best case] [already sorted / partitioning in the middle]
        -> O(nlogn) [average case]
        -> O(n^2) [worst case] [partitioning at any end]

    -> in selection sort we select the position and find out the element for that position
    -> in quick sort we select the element and find out the postion for that element

    -> different names of quick sort
        -> selection exchange sort
        -> partition exchange sort
        -> quick sort
    */ 
    auto partition = [](type *array, int low, int high) -> int {    // Lambda function to perform the partitioning step of the QuickSort algorithm
        int pivot = array[low]; // Choose the first element as the pivot
        int i = low, j = high;  // Initialize pointers

        do {
            do {    // Move the 'i' pointer to the right until an element greater than the pivot is found
                i++;
            } while (array[i] <= pivot);
            do {    // Move the 'j' pointer to the left until an element less than or equal to the pivot is found
                j--;
            } while (array[j] > pivot);
            if (i < j) {    // If 'i' and 'j' haven't crossed, swap the elements at 'i' and 'j'
                std::swap(array[i], array[j]);
            }
        } while (i < j); // Continue until 'i' and 'j' cross
        swap(array[low], array[j]); // Place the pivot in its correct position (swap pivot with the element at 'j')        
        return j;   // Return the index of the pivot's final position
    };
    if (low < high) {   // Base condition to terminate recursion
        int temp = partition(array, low, high); // Partition the array around a pivot and get the pivot's final position
        this->quickSort(array, low, temp - 1);  // Recursively sort the left subarray (elements less than the pivot)
        this->quickSort(array, temp + 1, high); // Recursively sort the right subarray (elements greater than the pivot)
    }
}
template <class type>   // Radix Sort
void Sort<type>::radixSort(type *array, int size) { // Function to sort an array using the Radix Sort algorithm
    /*
    -> O(nk) [best case] [k is the number of digits in the largest number]
    -> O(nk) [average case]
    -> O(nk) [worst case]

    -> in radix sort we divide the number into digits and sort them
    -> in counting sort we count the frequency of elements and sort them

    -> different names of radix sort
        -> bucket sort
        -> radix exchange sort
        -> radix sort
    */
    struct Node {   // Node structure for linked list
        type data = 0;  // Data value
        Node *next = nullptr;   // Pointer to the next node
        Node(type data) {this->data = data;}    // Constructor to initialize the node with data
    };
    Node **list = new Node*[10], *current;  // Array of linked lists to store elements based on digits (0-9) and a pointer to the current node
    int max = array[0], i, j, div;  // Variables to store the maximum element, array traversal, and division result

    for (i = 1; i < size; i++) {    // Find the maximum element in the array
        if (array[i] > max) {   // Compare the current element with max
            max = array[i]; // Update max if the current element is larger
        }
    }
    for (int k = 1; k <= max; k *= 10) {    // Loop to control the digit position (ones, tens, hundreds, ...)
        for (i = 0; i < 10; i++) {  // Initialize the linked list array
            list[i] = nullptr;  // Set each element to null
        }
        for (i = 0; i < size; i++) {    // Distribute elements into the linked list based on the current digit
            div = (array[i] / k) % 10;  // Calculate the digit at the current position

            if (!list[div]) {    // If the list is empty
                list[div] = new Node(array[i]); // Create a new node with the current element
            } else {    // Otherwise, add the element to the end of the list
                current = list[div];    // Set the current node to the head of the list

                while (current->next) { // Traverse the list to find the last node
                    current = current->next;    // Move to the next node
                }
                current->next = new Node(array[i]); // Add the current element to the end of the list
            }
        }
        for (i = j = 0; i < 10; i++) {  // Merge the linked lists back into the array
            current = list[i];  // Set the current node to the head of the list

            while (current) {   // Traverse the list
                array[j++] = current->data; // Copy the data value to the array
                current = current->next;    // Move to the next node
            }
        }
    }
}
template <class type>   // Selection Sort
void Sort<type>::selectionSort(type *array, int size) {   // Function to sort an array using the Selection Sort algorithm
    /*
    -> O(n^2) [best case] [always divide in the middle]
    -> O(n^2) [average case]
    -> O(n^2) [worst case] [always divide in the middle]

    -> in selection sort we select the position and find out the element for that position
    -> in quick sort we select the element and find out the postion for that element

    -> different names of selection sort
        -> exchange sort
        -> selection sort
    */
    int i, j, k;    // Variables for array traversal and finding the minimum element

    for (i = 0; i < size - 1; i++) {    // Loop to traverse the array
        for (j = i + 1, k = i; j < size; j++) {   // Loop to find the index of the minimum element in the unsorted part of the array
            if (array[j] < array[k]) {  // Compare the current element with the minimum element found so far
                k = j;  // Update the index of the minimum element
            }
        }
        swap(array[i], array[k]);   // Swap the minimum element with the first element of the unsorted part of the array
    }
}
template <class type>   // Shell Sort
void Sort<type>::shellSort(type *array, int size) { // Function to sort an array using the Shell Sort algorithm
    /*
    -> O(n^1.25) [best case] [always divide in the middle]
    -> O(n^1.25) [average case]
    -> O(n^1.25) [worst case] [always divide in the middle] 

    -> in shell sort we divide the array into subarrays and sort them
    -> in insertion sort we select the element and find out the postion for that element

    -> different names of shell sort
        -> diminishing increment sort
        -> shell sort
    */
    type temp;  // Temporary variable to hold the current element during insertion

    for (int gap = size / 2, i, j; gap >= 1; gap /= 2) {    // Loop to control the gap sequence
        for (i = gap; i < size; i++) {  // Loop to traverse the array from the gap index to the end
            temp = array[i];    // Store the current element to be inserted
            j = i - gap;    // Set 'j' to the index of the element at the gap distance

            while (j > -1 && array[j] > temp) { // Move elements that are greater than 'temp' by the gap distance to the right
                array[j+gap] = array[j];    // Shift the element to the right by the gap distance
                j -= gap;   // Move the index 'j' by the gap distance to the left
            }
            array[j+gap] = temp;    // Insert the stored 'temp' element into its correct position
        }
    }
}

void print(int *array, int size) {
    if (not size) {
        std::cout << "No elements to display" << std::endl;
    } else {
        std::cout << '[';
        size--;
        for (int i = 0; i < size; i++) std::cout << array[i] << ", ";
        std::cout << array[size] <<  ']' << std::endl;
    }
}