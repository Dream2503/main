#include <iostream>
#include <vector>
#include <utility>
#include "fraction"

class Matrix {
    private:
        std::vector<std::vector<Fraction>> _matrix;
        int row, column;
        Matrix *input();
        Matrix *operatorAddSub(std::string, Matrix&);
        Matrix *identity();
        Matrix *null();
        // Matrix *operatorMul(string, Matrix&);
        // Matrix *operatorMul(string, Fraction&);
    
    public:
        std::pair<int,int> order = {this->row, this->column};
        Matrix() {}
        Matrix(int, int, std::string, std::vector<std::vector<Fraction>>);
        Matrix(int, int, std::string, std::initializer_list<std::initializer_list<Fraction>>);
        bool isSquare() {return this->row == this->column;}
        bool isSkewSymmetric() {return *this == *(*this->transpose() * (-1));}
        bool isSymmetric() {return *this == *this->transpose();}
        std::vector<std::vector<Fraction>> matrix() {return this->_matrix;}
        Matrix *operator+(Matrix&);
        Matrix *operator-(Matrix&);
        Matrix *operator*(Matrix&);
        Matrix *operator*(Fraction);
        Matrix *operator+=(Matrix&);
        Matrix *operator-=(Matrix&);
        Matrix *operator*=(Matrix&);
        Matrix *operator*=(Fraction);
        bool operator==(Matrix&);
        bool operator!=(Matrix &matrix) {return not operator==(matrix);}
        friend std::ostream &operator<<(std::ostream&, Matrix&);
        std::vector<Fraction> &operator[](int);
        Matrix *transpose();
        std::string type();
};

Matrix::Matrix(int rows, int columns, std::string method = "pass", std::vector<std::vector<Fraction>> matrix) {
    if (rows == 0 or columns == 0) {
        throw std::invalid_argument("row or column cannot be 0");
    }
    this->row = rows; this->column = columns;
    this->_matrix = matrix;

    if (method == "pass" and not(matrix.size() == rows and matrix[0].size() == columns)) {
        throw std::invalid_argument("Invalid Matrix");
    } else {
        if (method == "input") {
            this->input();
        } else if (method == "null") {
            this->null();
        } else if (method == "identity") {
            this->identity();
        } else {
            throw std::invalid_argument("invalid method");
        }
    }
}
Matrix::Matrix(int rows, int columns, std::string method = "pass", std::initializer_list<std::initializer_list<Fraction>> init = {{}}) {
    int i = 0, j = 0;

    for (std::initializer_list<Fraction> row: init) {
        this->_matrix.push_back(std::vector<Fraction>(column, 0));

        for (Fraction element: row) {
            this->_matrix[i][j++] = element;
        }
        i++; j = 0;
    }
    Matrix(rows, columns, method, this->_matrix);
}

Matrix *Matrix::operator+(Matrix &matrix) {
    Matrix *result = new Matrix(this->row, this->column, "null");

    if (this->order == matrix.order) {
            for (int i = 0; i < this->row; i++) {
                for (int j = 0; j < this->column; j++) {
                    result->_matrix[i][j] = this->_matrix[i][j] + matrix[i][j];
                }
            }
        return result;
    }
    throw std::invalid_argument("Invalid matrix order for matrix addition");
}
Matrix *Matrix::operator+=(Matrix &matrix) {
    if (this->order == matrix.order) {
            for (int i = 0; i < this->row; i++) {
                for (int j = 0; j < this->column; j++) {
                    this->_matrix[i][j] += matrix[i][j];
                }
            }
        return this;
    }
    throw std::invalid_argument("Invalid matrix order for matrix addition");
}
Matrix *Matrix::operator-(Matrix &matrix) {
    Matrix *result = new Matrix(this->row, this->column, "null");

    if (this->order == matrix.order) {
            for (int i = 0; i < this->row; i++) {
                for (int j = 0; j < this->column; j++) {
                    result->_matrix[i][j] = this->_matrix[i][j] - matrix[i][j];
                }
            }
        return result;
    }
    throw std::invalid_argument("Invalid matrix order for matrix addition");
}
Matrix *Matrix::operator-=(Matrix &matrix) {
    if (this->order == matrix.order) {
            for (int i = 0; i < this->row; i++) {
                for (int j = 0; j < this->column; j++) {
                    this->_matrix[i][j] -= matrix[i][j];
                }
            }
        return this;
    }
    throw std::invalid_argument("Invalid matrix order for matrix addition");
}
Matrix *Matrix::operator*(Fraction frac) {
    Matrix *result = new Matrix(this->row, this->column, "null");

    for (int row = 0; row < this->row; row++)
        for (int column = 0; column < this->column; column++)
            result->_matrix[row][column] = this->_matrix[row][column] * frac;

    return result;
}
Matrix *Matrix::operator*(Matrix &matrix) {
    Matrix *result = new Matrix(this->row, matrix.column, "null");

    if (this->column == matrix.row) {
        for (int k = 0; k < this->row; k++) {
            for (int i = 0; i < matrix.column; i++) {
                for (int j = 0; j < this->row; j++) {
                    result->_matrix[k][i] += this->_matrix[k][j] * matrix[j][i];
                }
            }
        }
        return result;
    }
    throw std::invalid_argument("Invalid matrix order for operation");
}
Matrix *Matrix::operator*=(Fraction frac) {
    for (int row = 0; row < this->row; row++)
        for (int column = 0; column < this->column; column++)
            this->_matrix[row][column] *= frac;

    return this;
}
Matrix *Matrix::operator*=(Matrix &matrix) {
    Matrix result = Matrix(this->row, matrix.column, "null");

    if (this->column == matrix.row) {
        for (int k = 0; k < this->row; k++) {
            for (int i = 0; i < matrix.column; i++) {
                for (int j = 0; j < this->row; j++) {
                    result[k][i] += this->_matrix[k][j] * matrix[j][i];
                }
            }
        }
        this->row = matrix.row, this->column = matrix.column, this->order = matrix.order;
        this->_matrix = matrix._matrix;
        return this;
    }
    throw std::invalid_argument("Invalid matrix order for operation");
}

Matrix *Matrix::input() {
    std::string inputRow, fracStr;
    for (int row = 0; row < this->row; row++) {
        cout << "Enter elements of " << row + 1 << " (space-separated values): ";
        getline(cin, inputRow);
        std::stringstream ss(inputRow);

        for (int column = 0; column < this->column; column++) {
            ss >> fracStr;
            this->_matrix[row][column] = Fraction(fracStr);
        }
    }
    return this;
}
std::string Matrix::type() {
    std::string res;
    if (this->row == 1 and this->column != 1) {
        res = "row";
    } else if (this->column == 1 and this->row != 1) {
        res = "column";
    } else if (this->row == this->column) {
        res = "square";
        bool isScalar = true, isIdentity = true, isDiagonal = true;

        for (int row = 0; row < this->row; row++) {
            for (int column = 0; column < this->column; column++) {
                if (row == column) {
                    if (this->_matrix[row][column] != this->_matrix[0][0]) {
                        isScalar = false;
                    } else if ((double)this->_matrix[row][column] != 1) {
                        isIdentity = false;
                    }
                } else if ((double)this->_matrix[row][column] != 0) {
                    isScalar = isIdentity = isDiagonal = false;
                }
            }
            if (not(isScalar and isIdentity and isDiagonal)) {
                break;
            }
        }
        if (isIdentity) {
            res = "identity";
        } else if (isScalar) {
            res = "scalar";
        } else if (isDiagonal) {
            res = "diagonal";
        }
    }
    else if (this->row != this->column) {
        res = "rectangular";
    }
    bool isNull = true;

    for (int row = 0; row < this->row; row++) {
        for (int column = 0; column < this->column; column++) {
            if ((double)this->_matrix[row][column] != 0) {
                isNull = false;
                break;
            }
        }
        if (not isNull) {
            break;
        }
    }
    if (isNull) {
        res = "null";
    }
    return res;
}
Matrix *Matrix::operatorAddSub(string opr, Matrix &matrix) {
    Matrix *result;

    if (this->row == matrix.row and this->column == matrix.column) {
        if (opr == "+=" or opr == "-=") result = this;
        else if (opr == "+" or opr == "-") result = new Matrix(this->row, matrix.column, "null", {{}});
        
        for (int row = 0; row < result->row; row++)
            for (int column = 0; column < result->column; column++)
                switch (opr[0]) {
                    case '+':
                        result->_matrix[row][column] = this->_matrix[row][column] + matrix[row][column];
                        break;
                    case '-':
                        result->_matrix[row][column] = this->_matrix[row][column] - matrix[row][column];
                        break;
                    default:
                        throw invalid_argument("Invalid operator");
                }
        return result->matType();
    }
    throw invalid_argument("Invalid matrix order for operation");
}
Matrix *Matrix::operatorMul(string opr, Matrix &matrix) {
    Matrix *result;

    if (this->column == matrix.row) {
        if (opr == "*=") result = this;
        else if (opr == "*") result = new Matrix(this->row, matrix.column, "null", {{}});

        for (int k = 0; k < this->row; k++)
            for (int i = 0; i < matrix.column; i++)
                for (int j = 0; j < this->row; j++)
                    result->_matrix[k][i] += this->_matrix[k][j] * matrix[j][i];

        return result->matType();
    }
    throw invalid_argument("Invalid matrix order for operation");
}
Matrix *Matrix::operatorMul(string opr, Fraction &num) {
    Matrix *result;
    if (opr == "*=") result = this;
    else if (opr == "*") result = new Matrix(this->row, this->column, "null", {{}});

    for (int row = 0; row < result->row; row++)
        for (int column = 0; column < result->column; column++)
            result->_matrix[row][column] = this->_matrix[row][column] * num;

    return result->matType();
}
bool Matrix::operator==(Matrix &matrix) {
    for (int row = 0; row < this->row; row++) {
        for (int column = 0; column < this->column; column++) {
            if (this->_matrix[row][column] != matrix[row][column]) {
                return false;
            }
        }
    }
    return true;
}
std::ostream &operator<<(std::ostream &stream, Matrix &matrix) {
    for (int row = 0; row < matrix.row; row++) {
        stream << '[';

        for (int column = 0; column < matrix.column; column++) {
            stream << matrix[row][column];

            if (column + 1 != matrix.column) {
                stream << ", ";
            }
        }
        stream << ']' << std::endl;
    } 
    return stream; 
}
std::vector<Fraction> &Matrix::operator[](int index) {
    if (index >= this->row or index < 0) {
        throw std::invalid_argument("Index out of range");
    }
    return this->_matrix[index];
}
Matrix *Matrix::transpose() {
    Matrix *result = new Matrix(this->row, this->column, "pass");

    for (int row = 0; row < this->row; row++) {
        for (int column = 0; column < this->column; column++) {
            result->_matrix[column][row] = this->_matrix[row][column];
        }
    }
    return result;
}