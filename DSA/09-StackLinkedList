#include <iostream>
using namespace std;

template <class type>
class Stack {
    struct Node {
        type data = 0;
        Node *next = nullptr;
    };
    Node *top = nullptr;
    bool isOpr(char ch) {return (ch == '+' || ch == '-' || ch == '*' || ch == '/');}
    int pres(char);
    bool operators(Stack<type>, string);

    public:
        Stack() {}
        Stack(initializer_list<type> list) {for (const type element: list) this->push(element);}
        Stack(Stack<type>&);
        Stack(type *list, int size) {for (int i = 0; i < size; i++) this->push(list[i]);}
        double average() {return this->sum() / (double)this->length();}
        void clear() {while (not this->isEmpty()) this->pop();}
        bool contains(type);
        Stack<type> copy() {return *this;}
        int count(type);
        type evalPostfix(string);
        void extend(Stack<type> stack) {for (int i = 0; i <= stack.top; i++) this->append(stack.array[i]);}
        void display() {operator<<(cout, *this);}
        string infixToPostfix(string);
        int index(type);
        bool isSorted();
        bool isEmpty() {return this->top == nullptr;}
        int length();
        type max();
        type min();
        Stack<type> operator+(Stack<type>);
        void operator+=(Stack<type> stack) {this->extend(stack);}
        Stack<type> operator*(int);
        void operator*=(int);
        bool operator>(Stack<type> stack) {return this->operators(stack, ">");}
        bool operator>=(Stack<type> stack) {return this->operators(stack, ">=");}
        bool operator<(Stack<type> stack) {return this->operators(stack, "<");}
        bool operator<=(Stack<type> stack) {return this->operators(stack, "<=");}
        bool operator==(Stack<type> stack) {return this->operators(stack, "==");}
        bool operator!=(Stack<type> stack) {return not (*this == stack);}
        template <class T>
        friend ostream &operator<<(ostream&, Stack<T>);
        type operator[](int index) {return this->peek(index);}
        type peek(int);
        type pop();
        void push(type);
        type stackTop();
        type sum();
};
template <class type>
Stack<type>::Stack(Stack<type> &stack) {
    Node *current = stack.top;
    
    while (current) {
        this->push(current->data);
        current = current->next;
    }
}
template <class type>
int Stack<type>::pres(char ch) {
    if (ch == '+' || ch == '-') return 1;
    if (ch == '*' || ch == '/') return 2;
    return 0;
}
template <class type>
bool Stack<type>::operators(Stack<type> list, string opr) {
    Node *current1 = this->top, *current2 = list.top;

    while (current1 and current2) {
        if ((opr == ">") and (current1->data <= current2->data)) return false;
        else if ((opr == ">=") and (current1->data < current2->data)) return false;
        else if ((opr == "<") and (current1->data >= current2->data)) return false;
        else if ((opr == "<=") and (current1->data > current2->data)) return false;
        else if ((opr == "==") and (current1->data != current2->data)) return false;
        current1 = current1->next;
        current2 = current2->next;
    }
    if ((current1 or current2) and (opr == "==")) return false;
    return true;
}

template <class type>
bool Stack<type>::contains(type value) {
    Node *current = this->top;
    while (current) if (current->data == value) return true;
    return false;
}
template <class type>
int Stack<type>::count(type value) {
    int cnt = 0;
    Node *current = this->top;
    while (current) if (current->data == value) cnt++;
    return cnt;
}
template <class type>
type Stack<type>::evalPostfix(string str) {
    // this->clear();
    type x1, x2, res;

    for (char ch: str) {
        if (this->isOpr(ch)) {
            x2 = this->pop(), x1 = this->pop();

            switch (ch) {
                case '+':
                    res = x1 + x2;
                    break;
                case '-':
                    res = x1 - x2;
                    break;
                case '*':
                    res = x1 * x2;
                    break;
                case '/':
                    res = x1 / x2;
                    break;
                default:
                    break;
            }
            this->push(res);
        } else this->push(ch - '0');
    }
    return this->pop();
}
template <class type>
string Stack<type>::infixToPostfix(string infix) {
    // this->clear();
    string postfix;
    int i = 0;

    while (infix[i]) {
        if (isOpr(infix[i])) {
            if (pres(infix[i]) > pres(this->stackTop())) this->push(infix[i++]);
            else postfix += this->pop();
        } else postfix += infix[i++];
    }
    while (not this->isEmpty()) postfix += this->pop();
    return postfix;
}
template <class type>
int Stack<type>::index(type value) {
    int index = 0;
    Node *current = this->top;

    while (current) {
        if (current->data == value) return index;
        index++;
    }
    return index;
}
template <class type>
bool Stack<type>::isSorted() {
    Node *current = this->top;
    while (current->next) if (current->data < current->next->data) return false;
    return true;
}
template <class type>
int Stack<type>::length() {
    int len = 0;
    Node *current = this->top;

    while (current) {
        len++;
        current = current->next;
    }
    return len;
}
template <class type>
type Stack<type>::max() {
    if (this->isEmpty()) return 0;
    type max = this->top->data;
    Node *current = this->top->next;

    while (current) {
        if (current->data > max) max = current->data;
        current = current->next;
    }
    return max;
}
template <class type>
type Stack<type>::min() {
    if (this->isEmpty()) return 0;
    type min = this->top->data;
    Node *current = this->top->next;

    while (current) {
        if (current->data < min) min = current->data;
        current = current->next;
    }
    return min;
}
template <class type>
Stack<type> Stack<type>::operator+(Stack<type> stack) {
    Stack<type> res(*this);
    res.extend(stack);
    return res;
}
template <class type>
Stack<type> Stack<type>::operator*(int num) {
    Stack<type> res;
    if (this->isEmpty() or num == 0) return res;
    if (num < 0) {
        cout << "Invalid number";
        exit(0);
    }
    for (int i = 1; i < num; i++) res.extend(*this);
    return res;
}
template <class type>
void Stack<type>::operator*=(int num) {
    Stack<type> res;
    res = *this * num;
    this->clear();
    *this = res;
}
template <class T>
ostream &operator<<(ostream &out, Stack<T> stack) {
    if (stack.isEmpty()) cout << "Stack is empty\n";
    out << stack.top->data << "    <- top" << endl;
    typename Stack<T>::Node *current = stack.top->next;
    
    while (current) {
        out << current->data << endl;
        current = current->next;
    }
    return out;
}
template <class type>
type Stack<type>::peek(int pos) {
    if (pos < 0) {
        cout << "Index out of range";
        exit(0);
    }
    Node *current = this->top;

    for (int i = 0; i < pos; i++) {
        if (current) current = current->next;
        else {
            cout << "Index out of range";
            exit(0);
        }
    }
    return current->data;
}
template <class type>
type Stack<type>::pop() {
    if (this->isEmpty()) {
        cout << "Stack Underflow";
        exit(0);
    }
    Node *temp = this->top;
    type value = temp->data;
    this->top = this->top->next;
    delete temp;
    return value;
}
template <class type>
void Stack<type>::push(type value) {
    Node *temp = new Node;
    temp->data = value;
    temp->next = this->top;
    this->top = temp;
}
template <class type>
type Stack<type>::stackTop() {
    if (this->isEmpty()) return -1;
    return this->top->data;
}
template <class type>
type Stack<type>::sum() {
    type sum = 0;
    Node *current = this->top;

    while (current) {
        sum += current->data;
        current = current->next;
    }
    return sum;
}